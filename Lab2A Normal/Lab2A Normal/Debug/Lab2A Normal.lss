
Lab2A Normal.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000011a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000c6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000011a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000014c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006c3  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000639  00000000  00000000  00000877  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001ec  00000000  00000000  00000eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  0000109c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000038f  00000000  00000000  000010d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000024  00000000  00000000  0000145f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001483  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 54 00 	call	0xa8	; 0xa8 <main>
  78:	0c 94 61 00 	jmp	0xc2	; 0xc2 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <_Z7T0Delayi>:
		PORTB ^= 0x01;
    }
}
void T0Delay(int delay){
	int i=0;
	for(i=0;i<delay;i++){
  80:	18 16       	cp	r1, r24
  82:	19 06       	cpc	r1, r25
  84:	84 f4       	brge	.+32     	; 0xa6 <_Z7T0Delayi+0x26>
  86:	20 e0       	ldi	r18, 0x00	; 0
  88:	30 e0       	ldi	r19, 0x00	; 0
		TCNT0 = 0x00; //load TCNT0
		TCCR0A = 0x00; //Timer 0, Normal mode
		TCCR0B = 0x05; //clk/1024
  8a:	55 e0       	ldi	r21, 0x05	; 5
		while((TIFR0&(1<<TOV0))==0); //wait for TOV0 to roll over
		TCCR0B = 0; //turn off Timer 0
		TIFR0 = (1<<TOV0); //clear TOV0
  8c:	41 e0       	ldi	r20, 0x01	; 1
    }
}
void T0Delay(int delay){
	int i=0;
	for(i=0;i<delay;i++){
		TCNT0 = 0x00; //load TCNT0
  8e:	16 bc       	out	0x26, r1	; 38
		TCCR0A = 0x00; //Timer 0, Normal mode
  90:	14 bc       	out	0x24, r1	; 36
		TCCR0B = 0x05; //clk/1024
  92:	55 bd       	out	0x25, r21	; 37
		while((TIFR0&(1<<TOV0))==0); //wait for TOV0 to roll over
  94:	a8 9b       	sbis	0x15, 0	; 21
  96:	fe cf       	rjmp	.-4      	; 0x94 <_Z7T0Delayi+0x14>
		TCCR0B = 0; //turn off Timer 0
  98:	15 bc       	out	0x25, r1	; 37
		TIFR0 = (1<<TOV0); //clear TOV0
  9a:	45 bb       	out	0x15, r20	; 21
		PORTB ^= 0x01;
    }
}
void T0Delay(int delay){
	int i=0;
	for(i=0;i<delay;i++){
  9c:	2f 5f       	subi	r18, 0xFF	; 255
  9e:	3f 4f       	sbci	r19, 0xFF	; 255
  a0:	82 17       	cp	r24, r18
  a2:	93 07       	cpc	r25, r19
  a4:	a1 f7       	brne	.-24     	; 0x8e <_Z7T0Delayi+0xe>
  a6:	08 95       	ret

000000a8 <main>:

void T0Delay(int delay);
int main(void)
{
    /* Replace with your application code */
	DDRB = 0xFF;
  a8:	8f ef       	ldi	r24, 0xFF	; 255
  aa:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x01;
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	85 b9       	out	0x05, r24	; 5
    while (1) 
    {
		T0Delay(61);
		PORTB ^= 0x01;
  b0:	c1 e0       	ldi	r28, 0x01	; 1
    /* Replace with your application code */
	DDRB = 0xFF;
	PORTB = 0x01;
    while (1) 
    {
		T0Delay(61);
  b2:	8d e3       	ldi	r24, 0x3D	; 61
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	0e 94 40 00 	call	0x80	; 0x80 <_Z7T0Delayi>
		PORTB ^= 0x01;
  ba:	85 b1       	in	r24, 0x05	; 5
  bc:	8c 27       	eor	r24, r28
  be:	85 b9       	out	0x05, r24	; 5
  c0:	f8 cf       	rjmp	.-16     	; 0xb2 <main+0xa>

000000c2 <_exit>:
  c2:	f8 94       	cli

000000c4 <__stop_program>:
  c4:	ff cf       	rjmp	.-2      	; 0xc4 <__stop_program>
