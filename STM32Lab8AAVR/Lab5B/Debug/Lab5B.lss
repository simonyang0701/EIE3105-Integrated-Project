
Lab5B.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000024c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001f8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000027c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006fe  00000000  00000000  000002dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000637  00000000  00000000  000009da  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000034b  00000000  00000000  00001011  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000135c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000034b  00000000  00000000  00001380  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000f0  00000000  00000000  000016cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000017bb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
{
	

	unsigned char ch,count,c1,c2,t1,pulsewidth;
	
	DDRD = 0b00100000; //PD5 (OC0Ba)
  80:	80 e2       	ldi	r24, 0x20	; 32
  82:	8a b9       	out	0x0a, r24	; 10
	UCSR0B = 0x18;//(1<<RXEN)|(1<<TXEN);
  84:	88 e1       	ldi	r24, 0x18	; 24
  86:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = 0x06;//(1<<UCSZ1)|(1<<UCSZ0)|(1<<URSEL);
  8a:	86 e0       	ldi	r24, 0x06	; 6
  8c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UBRR0L = 107; //9600 baud rate
  90:	8b e6       	ldi	r24, 0x6B	; 107
  92:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	count = c1 = 0;
  96:	60 e0       	ldi	r22, 0x00	; 0

	while(1)
	{
		while(!(UCSR0A & (1<<RXC0))); //new data received
  98:	e0 ec       	ldi	r30, 0xC0	; 192
  9a:	f0 e0       	ldi	r31, 0x00	; 0
		ch = UDR0;
  9c:	c6 ec       	ldi	r28, 0xC6	; 198
  9e:	d0 e0       	ldi	r29, 0x00	; 0
				if(i==1) UDR0 = c2;
			}
			count = 0;
			
			OCR0B = (c1 - '0')*10+(c2-'0');
			OCR0A = 127;//((c1 - '0')*10+(c2-'0'))*2; // 50Hz
  a0:	0f 2e       	mov	r0, r31
  a2:	ff e7       	ldi	r31, 0x7F	; 127
  a4:	9f 2e       	mov	r9, r31
  a6:	f0 2d       	mov	r31, r0
			
			
			TCCR0A = (1<< COM0A1)| (0<< COM0A0) | (1<< COM0B1) | (0<< COM0B0)| (1<<WGM01) | (1<< WGM00); //pre 1024, Fast PWM
  a8:	0f 2e       	mov	r0, r31
  aa:	f3 ea       	ldi	r31, 0xA3	; 163
  ac:	af 2e       	mov	r10, r31
  ae:	f0 2d       	mov	r31, r0
			TCCR0B = (1<< WGM02)| (0<<CS01) | (1<< CS02) | (1<< CS00); //presc 1024, fast pwm	//101 here :o) !100
  b0:	0f 2e       	mov	r0, r31
  b2:	fd e0       	ldi	r31, 0x0D	; 13
  b4:	bf 2e       	mov	r11, r31
  b6:	f0 2d       	mov	r31, r0
			PORTB = 0xFF;
  b8:	cc 24       	eor	r12, r12
  ba:	ca 94       	dec	r12
			TCCR1A = 0;
  bc:	68 94       	set
  be:	44 24       	eor	r4, r4
  c0:	47 f8       	bld	r4, 7
  c2:	51 2c       	mov	r5, r1
			TCCR1B = (1<<ICES1)|(1<<CS12)|(0<<CS11)|(0<<CS10);
  c4:	01 e8       	ldi	r16, 0x81	; 129
  c6:	10 e0       	ldi	r17, 0x00	; 0
  c8:	0f 2e       	mov	r0, r31
  ca:	f4 e4       	ldi	r31, 0x44	; 68
  cc:	df 2e       	mov	r13, r31
  ce:	f0 2d       	mov	r31, r0
			TIFR1 = (1<<ICF1);
  d0:	40 e2       	ldi	r20, 0x20	; 32
			
			while((TIFR1&(1<<ICF1)) == 0);
			
			
			
			t1 = ICR1L;
  d2:	26 e8       	ldi	r18, 0x86	; 134
  d4:	30 e0       	ldi	r19, 0x00	; 0
			TIFR1 = (1<<ICF1);
			TCCR1B = (0<<ICES1)|(1<<CS12)|(0<<CS11)|(1<<CS10);
  d6:	0f 2e       	mov	r0, r31
  d8:	f5 e0       	ldi	r31, 0x05	; 5
  da:	ef 2e       	mov	r14, r31
  dc:	f0 2d       	mov	r31, r0
			while((TIFR1&(1<<ICF1)) ==0);
			pulsewidth = ICR1L - t1;
			TIFR1=(1<<ICF1);
			c2=(pulsewidth%10);
  de:	0f 2e       	mov	r0, r31
  e0:	fd ec       	ldi	r31, 0xCD	; 205
  e2:	ff 2e       	mov	r15, r31
  e4:	f0 2d       	mov	r31, r0
			c1=((pulsewidth-c2)/10)+'0';
  e6:	0f 2e       	mov	r0, r31
  e8:	fa e0       	ldi	r31, 0x0A	; 10
  ea:	6f 2e       	mov	r6, r31
  ec:	71 2c       	mov	r7, r1
  ee:	f0 2d       	mov	r31, r0
	while(1)
	{
		while(!(UCSR0A & (1<<RXC0))); //new data received
		ch = UDR0;
		if(ch >= '0' && ch<='9') count++;
		else count = 0;
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	01 c0       	rjmp	.+2      	; 0xf6 <main+0x76>
  f4:	90 e0       	ldi	r25, 0x00	; 0
	UBRR0L = 107; //9600 baud rate
	count = c1 = 0;

	while(1)
	{
		while(!(UCSR0A & (1<<RXC0))); //new data received
  f6:	80 81       	ld	r24, Z
  f8:	88 23       	and	r24, r24
  fa:	ec f7       	brge	.-6      	; 0xf6 <main+0x76>
		ch = UDR0;
  fc:	88 81       	ld	r24, Y
		if(ch >= '0' && ch<='9') count++;
  fe:	50 ed       	ldi	r21, 0xD0	; 208
 100:	58 0f       	add	r21, r24
 102:	5a 30       	cpi	r21, 0x0A	; 10
 104:	b8 f7       	brcc	.-18     	; 0xf4 <main+0x74>
 106:	9f 5f       	subi	r25, 0xFF	; 255
		else count = 0;
		
		if(count == 1 && ch>'0') //range : 10-99 -> 0X (X=1-9 should be rejected)
 108:	91 30       	cpi	r25, 0x01	; 1
 10a:	21 f4       	brne	.+8      	; 0x114 <main+0x94>
 10c:	81 33       	cpi	r24, 0x31	; 49
 10e:	98 f3       	brcs	.-26     	; 0xf6 <main+0x76>
	count = c1 = 0;

	while(1)
	{
		while(!(UCSR0A & (1<<RXC0))); //new data received
		ch = UDR0;
 110:	68 2f       	mov	r22, r24
 112:	f1 cf       	rjmp	.-30     	; 0xf6 <main+0x76>
		if(ch >= '0' && ch<='9') count++;
		else count = 0;
		
		if(count == 1 && ch>'0') //range : 10-99 -> 0X (X=1-9 should be rejected)
		c1 = ch;
		if(count == 2)
 114:	92 30       	cpi	r25, 0x02	; 2
 116:	79 f7       	brne	.-34     	; 0xf6 <main+0x76>
		{
			c2 = ch;
			//////debug
			for(unsigned char i=0;i<2;i++)
			{
				while (!(UCSR0A & (1<<UDRE0))); // is empty <-- what does it mean
 118:	90 81       	ld	r25, Z
 11a:	95 ff       	sbrs	r25, 5
 11c:	fd cf       	rjmp	.-6      	; 0x118 <main+0x98>
				if(i==0) UDR0 = c1;
 11e:	68 83       	st	Y, r22
		{
			c2 = ch;
			//////debug
			for(unsigned char i=0;i<2;i++)
			{
				while (!(UCSR0A & (1<<UDRE0))); // is empty <-- what does it mean
 120:	90 81       	ld	r25, Z
 122:	95 ff       	sbrs	r25, 5
 124:	fd cf       	rjmp	.-6      	; 0x120 <main+0xa0>
				if(i==0) UDR0 = c1;
				if(i==1) UDR0 = c2;
 126:	88 83       	st	Y, r24
			}
			count = 0;
			
			OCR0B = (c1 - '0')*10+(c2-'0');
 128:	66 0f       	add	r22, r22
 12a:	60 56       	subi	r22, 0x60	; 96
 12c:	86 2f       	mov	r24, r22
 12e:	88 0f       	add	r24, r24
 130:	88 0f       	add	r24, r24
 132:	68 0f       	add	r22, r24
 134:	56 0f       	add	r21, r22
 136:	58 bd       	out	0x28, r21	; 40
			OCR0A = 127;//((c1 - '0')*10+(c2-'0'))*2; // 50Hz
 138:	97 bc       	out	0x27, r9	; 39
			
			
			TCCR0A = (1<< COM0A1)| (0<< COM0A0) | (1<< COM0B1) | (0<< COM0B0)| (1<<WGM01) | (1<< WGM00); //pre 1024, Fast PWM
 13a:	a4 bc       	out	0x24, r10	; 36
			TCCR0B = (1<< WGM02)| (0<<CS01) | (1<< CS02) | (1<< CS00); //presc 1024, fast pwm	//101 here :o) !100
 13c:	b5 bc       	out	0x25, r11	; 37
			PORTB = 0xFF;
 13e:	c5 b8       	out	0x05, r12	; 5
			TCCR1A = 0;
 140:	d2 01       	movw	r26, r4
 142:	1c 92       	st	X, r1
			TCCR1B = (1<<ICES1)|(1<<CS12)|(0<<CS11)|(0<<CS10);
 144:	d8 01       	movw	r26, r16
 146:	dc 92       	st	X, r13
			TIFR1 = (1<<ICF1);
 148:	46 bb       	out	0x16, r20	; 22
			
			while((TIFR1&(1<<ICF1)) == 0);
 14a:	b5 9b       	sbis	0x16, 5	; 22
 14c:	fe cf       	rjmp	.-4      	; 0x14a <main+0xca>
			
			
			
			t1 = ICR1L;
 14e:	d9 01       	movw	r26, r18
 150:	9c 91       	ld	r25, X
			TIFR1 = (1<<ICF1);
 152:	46 bb       	out	0x16, r20	; 22
			TCCR1B = (0<<ICES1)|(1<<CS12)|(0<<CS11)|(1<<CS10);
 154:	d8 01       	movw	r26, r16
 156:	ec 92       	st	X, r14
			while((TIFR1&(1<<ICF1)) ==0);
 158:	b5 9b       	sbis	0x16, 5	; 22
 15a:	fe cf       	rjmp	.-4      	; 0x158 <main+0xd8>
			pulsewidth = ICR1L - t1;
 15c:	d9 01       	movw	r26, r18
 15e:	8c 91       	ld	r24, X
 160:	89 1b       	sub	r24, r25
			TIFR1=(1<<ICF1);
 162:	46 bb       	out	0x16, r20	; 22
			c2=(pulsewidth%10);
 164:	8f 9d       	mul	r24, r15
 166:	81 2c       	mov	r8, r1
 168:	11 24       	eor	r1, r1
 16a:	86 94       	lsr	r8
 16c:	86 94       	lsr	r8
 16e:	86 94       	lsr	r8
 170:	88 0c       	add	r8, r8
 172:	98 2d       	mov	r25, r8
 174:	99 0f       	add	r25, r25
 176:	99 0f       	add	r25, r25
 178:	89 0e       	add	r8, r25
 17a:	b8 2f       	mov	r27, r24
 17c:	b8 19       	sub	r27, r8
 17e:	8b 2e       	mov	r8, r27
			c1=((pulsewidth-c2)/10)+'0';
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	8b 1b       	sub	r24, r27
 184:	91 09       	sbc	r25, r1
 186:	b3 01       	movw	r22, r6
 188:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <__divmodhi4>
 18c:	60 5d       	subi	r22, 0xD0	; 208
			c2+='0';
			for(unsigned char i=0;i<2;i++)
			{
				while (!(UCSR0A & (1<<UDRE0))); // is empty <-- what does it mean
 18e:	80 81       	ld	r24, Z
 190:	85 ff       	sbrs	r24, 5
 192:	fd cf       	rjmp	.-6      	; 0x18e <main+0x10e>
				if(i==0) UDR0 = c1;
 194:	68 83       	st	Y, r22
			c2=(pulsewidth%10);
			c1=((pulsewidth-c2)/10)+'0';
			c2+='0';
			for(unsigned char i=0;i<2;i++)
			{
				while (!(UCSR0A & (1<<UDRE0))); // is empty <-- what does it mean
 196:	80 81       	ld	r24, Z
 198:	85 ff       	sbrs	r24, 5
 19a:	fd cf       	rjmp	.-6      	; 0x196 <main+0x116>
			while((TIFR1&(1<<ICF1)) ==0);
			pulsewidth = ICR1L - t1;
			TIFR1=(1<<ICF1);
			c2=(pulsewidth%10);
			c1=((pulsewidth-c2)/10)+'0';
			c2+='0';
 19c:	80 e3       	ldi	r24, 0x30	; 48
 19e:	88 0d       	add	r24, r8
			for(unsigned char i=0;i<2;i++)
			{
				while (!(UCSR0A & (1<<UDRE0))); // is empty <-- what does it mean
				if(i==0) UDR0 = c1;
				if(i==1) UDR0 = c2;
 1a0:	88 83       	st	Y, r24
 1a2:	a6 cf       	rjmp	.-180    	; 0xf0 <main+0x70>

000001a4 <__divmodhi4>:
 1a4:	97 fb       	bst	r25, 7
 1a6:	07 2e       	mov	r0, r23
 1a8:	16 f4       	brtc	.+4      	; 0x1ae <__divmodhi4+0xa>
 1aa:	00 94       	com	r0
 1ac:	07 d0       	rcall	.+14     	; 0x1bc <__divmodhi4_neg1>
 1ae:	77 fd       	sbrc	r23, 7
 1b0:	09 d0       	rcall	.+18     	; 0x1c4 <__divmodhi4_neg2>
 1b2:	0e 94 e6 00 	call	0x1cc	; 0x1cc <__udivmodhi4>
 1b6:	07 fc       	sbrc	r0, 7
 1b8:	05 d0       	rcall	.+10     	; 0x1c4 <__divmodhi4_neg2>
 1ba:	3e f4       	brtc	.+14     	; 0x1ca <__divmodhi4_exit>

000001bc <__divmodhi4_neg1>:
 1bc:	90 95       	com	r25
 1be:	81 95       	neg	r24
 1c0:	9f 4f       	sbci	r25, 0xFF	; 255
 1c2:	08 95       	ret

000001c4 <__divmodhi4_neg2>:
 1c4:	70 95       	com	r23
 1c6:	61 95       	neg	r22
 1c8:	7f 4f       	sbci	r23, 0xFF	; 255

000001ca <__divmodhi4_exit>:
 1ca:	08 95       	ret

000001cc <__udivmodhi4>:
 1cc:	aa 1b       	sub	r26, r26
 1ce:	bb 1b       	sub	r27, r27
 1d0:	51 e1       	ldi	r21, 0x11	; 17
 1d2:	07 c0       	rjmp	.+14     	; 0x1e2 <__udivmodhi4_ep>

000001d4 <__udivmodhi4_loop>:
 1d4:	aa 1f       	adc	r26, r26
 1d6:	bb 1f       	adc	r27, r27
 1d8:	a6 17       	cp	r26, r22
 1da:	b7 07       	cpc	r27, r23
 1dc:	10 f0       	brcs	.+4      	; 0x1e2 <__udivmodhi4_ep>
 1de:	a6 1b       	sub	r26, r22
 1e0:	b7 0b       	sbc	r27, r23

000001e2 <__udivmodhi4_ep>:
 1e2:	88 1f       	adc	r24, r24
 1e4:	99 1f       	adc	r25, r25
 1e6:	5a 95       	dec	r21
 1e8:	a9 f7       	brne	.-22     	; 0x1d4 <__udivmodhi4_loop>
 1ea:	80 95       	com	r24
 1ec:	90 95       	com	r25
 1ee:	bc 01       	movw	r22, r24
 1f0:	cd 01       	movw	r24, r26
 1f2:	08 95       	ret

000001f4 <_exit>:
 1f4:	f8 94       	cli

000001f6 <__stop_program>:
 1f6:	ff cf       	rjmp	.-2      	; 0x1f6 <__stop_program>
