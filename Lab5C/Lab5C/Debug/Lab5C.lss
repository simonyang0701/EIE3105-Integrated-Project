
Lab5C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000019c  00000210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000019c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000212  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000028  00000000  00000000  00000242  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000000ba  00000000  00000000  0000026a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000007c  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000000e5  00000000  00000000  000003a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000054  00000000  00000000  00000488  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000013e  00000000  00000000  000004dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000063  00000000  00000000  0000061a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  0000067d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 4b 00 	jmp	0x96	; 0x96 <__vector_21>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e9       	ldi	r30, 0x9C	; 156
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 a3 00 	call	0x146	; 0x146 <main>
  8e:	0c 94 cc 00 	jmp	0x198	; 0x198 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <__vector_21>:
#include <avr/io.h>
#include <avr/interrupt.h>
unsigned char device=1;


ISR(ADC_vect){
  96:	1f 92       	push	r1
  98:	0f 92       	push	r0
  9a:	0f b6       	in	r0, 0x3f	; 63
  9c:	0f 92       	push	r0
  9e:	11 24       	eor	r1, r1
  a0:	8f 93       	push	r24
  a2:	9f 93       	push	r25
  a4:	ef 93       	push	r30
  a6:	ff 93       	push	r31
	if(device==1){
  a8:	80 91 00 01 	lds	r24, 0x0100
  ac:	81 30       	cpi	r24, 0x01	; 1
  ae:	89 f4       	brne	.+34     	; 0xd2 <__vector_21+0x3c>
		ADMUX=0B11100000;	//2.56V ADC 0
  b0:	80 ee       	ldi	r24, 0xE0	; 224
  b2:	80 93 7c 00 	sts	0x007C, r24
		if(ADCH>0xEF){
  b6:	80 91 79 00 	lds	r24, 0x0079
  ba:	80 3f       	cpi	r24, 0xF0	; 240
  bc:	18 f0       	brcs	.+6      	; 0xc4 <__vector_21+0x2e>
			OCR0B=124;
  be:	8c e7       	ldi	r24, 0x7C	; 124
  c0:	88 bd       	out	0x28, r24	; 40
  c2:	01 c0       	rjmp	.+2      	; 0xc6 <__vector_21+0x30>
		}
		else{
			OCR0B=0;
  c4:	18 bc       	out	0x28, r1	; 40
		}
		device++;
  c6:	80 91 00 01 	lds	r24, 0x0100
  ca:	8f 5f       	subi	r24, 0xFF	; 255
  cc:	80 93 00 01 	sts	0x0100, r24
  d0:	2c c0       	rjmp	.+88     	; 0x12a <__vector_21+0x94>
	}
	
	else if(device==2){
  d2:	82 30       	cpi	r24, 0x02	; 2
  d4:	c1 f4       	brne	.+48     	; 0x106 <__vector_21+0x70>
		ADMUX=0B11100001;	//2.56V ADC 0
  d6:	81 ee       	ldi	r24, 0xE1	; 225
  d8:	80 93 7c 00 	sts	0x007C, r24
		if(ADCH>0xEF){
  dc:	80 91 79 00 	lds	r24, 0x0079
  e0:	80 3f       	cpi	r24, 0xF0	; 240
  e2:	38 f0       	brcs	.+14     	; 0xf2 <__vector_21+0x5c>
			OCR1B=124;
  e4:	8c e7       	ldi	r24, 0x7C	; 124
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	90 93 8b 00 	sts	0x008B, r25
  ec:	80 93 8a 00 	sts	0x008A, r24
  f0:	04 c0       	rjmp	.+8      	; 0xfa <__vector_21+0x64>
		}
		else{
			OCR1B=0;
  f2:	10 92 8b 00 	sts	0x008B, r1
  f6:	10 92 8a 00 	sts	0x008A, r1
		}
		device++;
  fa:	80 91 00 01 	lds	r24, 0x0100
  fe:	8f 5f       	subi	r24, 0xFF	; 255
 100:	80 93 00 01 	sts	0x0100, r24
 104:	12 c0       	rjmp	.+36     	; 0x12a <__vector_21+0x94>
	}
	else if(device==3){
 106:	83 30       	cpi	r24, 0x03	; 3
 108:	81 f4       	brne	.+32     	; 0x12a <__vector_21+0x94>
		ADMUX=0B11100010;	//2.56V ADC 0
 10a:	82 ee       	ldi	r24, 0xE2	; 226
 10c:	80 93 7c 00 	sts	0x007C, r24
		if(ADCH>0xEF){
 110:	80 91 79 00 	lds	r24, 0x0079
 114:	80 3f       	cpi	r24, 0xF0	; 240
 116:	20 f0       	brcs	.+8      	; 0x120 <__vector_21+0x8a>
			OCR2B=124;
 118:	8c e7       	ldi	r24, 0x7C	; 124
 11a:	80 93 b4 00 	sts	0x00B4, r24
 11e:	02 c0       	rjmp	.+4      	; 0x124 <__vector_21+0x8e>
		}
		else{
			OCR2B=0;
 120:	10 92 b4 00 	sts	0x00B4, r1
		}
		device=1;
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	80 93 00 01 	sts	0x0100, r24
	}
	ADCSRA|=(1<<ADSC);
 12a:	ea e7       	ldi	r30, 0x7A	; 122
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	80 64       	ori	r24, 0x40	; 64
 132:	80 83       	st	Z, r24
}
 134:	ff 91       	pop	r31
 136:	ef 91       	pop	r30
 138:	9f 91       	pop	r25
 13a:	8f 91       	pop	r24
 13c:	0f 90       	pop	r0
 13e:	0f be       	out	0x3f, r0	; 63
 140:	0f 90       	pop	r0
 142:	1f 90       	pop	r1
 144:	18 95       	reti

00000146 <main>:


int main(void)
{
	DDRD |= (1<<5)|(1<<3);
 146:	8a b1       	in	r24, 0x0a	; 10
 148:	88 62       	ori	r24, 0x28	; 40
 14a:	8a b9       	out	0x0a, r24	; 10
	DDRB |= (1<<2);//PD3, PD5, PB2: PWM output
 14c:	22 9a       	sbi	0x04, 2	; 4
	DDRC = 0;
 14e:	17 b8       	out	0x07, r1	; 7
	ADCSRA = 0x8F; //10001111? ADC enable, ADC interrupt enable, ck/128
 150:	8f e8       	ldi	r24, 0x8F	; 143
 152:	80 93 7a 00 	sts	0x007A, r24
	ADMUX = 0xE0;  //11100000? ADC0, left adjusted, 1.11 internal
 156:	ec e7       	ldi	r30, 0x7C	; 124
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	80 ee       	ldi	r24, 0xE0	; 224
 15c:	80 83       	st	Z, r24
	
	TCCR0A = 0xA3; //10100011, clear mode, fast pwm, OCR0A as top
 15e:	83 ea       	ldi	r24, 0xA3	; 163
 160:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0x0C; //00001100, prescaler 256
 162:	9c e0       	ldi	r25, 0x0C	; 12
 164:	95 bd       	out	0x25, r25	; 37
	OCR0A = 124;   // 16M/(500*256)
 166:	9c e7       	ldi	r25, 0x7C	; 124
 168:	97 bd       	out	0x27, r25	; 39
	TCCR1A = 0xA3; //10100011, clear mode, fast pwm, OCR1A as top
 16a:	80 93 80 00 	sts	0x0080, r24
	TCCR1B = 0x1C; //00011100, prescaler 256
 16e:	2c e1       	ldi	r18, 0x1C	; 28
 170:	20 93 81 00 	sts	0x0081, r18
	OCR1A = 124;    // 16M/(500*256)
 174:	f0 93 89 00 	sts	0x0089, r31
 178:	e0 93 88 00 	sts	0x0088, r30
	
	TCCR2A = 0xA3; //10100011,  clear mode, fast pwm, OCR2A as top
 17c:	80 93 b0 00 	sts	0x00B0, r24
	TCCR2B = 0x0E; //00001110, prescaler 256
 180:	8e e0       	ldi	r24, 0x0E	; 14
 182:	80 93 b1 00 	sts	0x00B1, r24
	OCR2A = 124;   // 16M/(500*256)
 186:	90 93 b3 00 	sts	0x00B3, r25

	sei();          //enable interrupt
 18a:	78 94       	sei
	ADCSRA |= (1<<ADSC);//start conversion
 18c:	ea e7       	ldi	r30, 0x7A	; 122
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	80 81       	ld	r24, Z
 192:	80 64       	ori	r24, 0x40	; 64
 194:	80 83       	st	Z, r24
 196:	ff cf       	rjmp	.-2      	; 0x196 <main+0x50>

00000198 <_exit>:
 198:	f8 94       	cli

0000019a <__stop_program>:
 19a:	ff cf       	rjmp	.-2      	; 0x19a <__stop_program>
