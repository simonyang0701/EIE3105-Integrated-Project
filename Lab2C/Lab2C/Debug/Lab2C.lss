
Lab2C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000102  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000ae  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000102  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000134  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000174  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000680  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005f8  00000000  00000000  00000814  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001c2  00000000  00000000  00000e0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000fd0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000036d  00000000  00000000  00000ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000024  00000000  00000000  00001361  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001385  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 55 00 	jmp	0xaa	; 0xaa <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:


int main(void)
{
    /* Replace with your application code */
	DDRD=0x00;
  80:	1a b8       	out	0x0a, r1	; 10
	DDRC=0x01;
  82:	81 e0       	ldi	r24, 0x01	; 1
  84:	87 b9       	out	0x07, r24	; 7
	int state = 0;
  86:	20 e0       	ldi	r18, 0x00	; 0
  88:	30 e0       	ldi	r19, 0x00	; 0
    while (1) 
    {
		PORTC = (state)>>0;
		OCR0A = 2;
  8a:	82 e0       	ldi	r24, 0x02	; 2
		TCCR0A = 0x02;
		TCCR0B = 0x06;
  8c:	96 e0       	ldi	r25, 0x06	; 6
		while((TIFR0&(1<<OCF0A))==0);
		state = 1-state;
  8e:	41 e0       	ldi	r20, 0x01	; 1
  90:	50 e0       	ldi	r21, 0x00	; 0
	DDRD=0x00;
	DDRC=0x01;
	int state = 0;
    while (1) 
    {
		PORTC = (state)>>0;
  92:	28 b9       	out	0x08, r18	; 8
		OCR0A = 2;
  94:	87 bd       	out	0x27, r24	; 39
		TCCR0A = 0x02;
  96:	84 bd       	out	0x24, r24	; 36
		TCCR0B = 0x06;
  98:	95 bd       	out	0x25, r25	; 37
		while((TIFR0&(1<<OCF0A))==0);
  9a:	a9 9b       	sbis	0x15, 1	; 21
  9c:	fe cf       	rjmp	.-4      	; 0x9a <main+0x1a>
		state = 1-state;
  9e:	ba 01       	movw	r22, r20
  a0:	62 1b       	sub	r22, r18
  a2:	73 0b       	sbc	r23, r19
  a4:	9b 01       	movw	r18, r22
		TIFR0 = 0x02;
  a6:	85 bb       	out	0x15, r24	; 21
{
    /* Replace with your application code */
	DDRD=0x00;
	DDRC=0x01;
	int state = 0;
    while (1) 
  a8:	f4 cf       	rjmp	.-24     	; 0x92 <main+0x12>

000000aa <_exit>:
  aa:	f8 94       	cli

000000ac <__stop_program>:
  ac:	ff cf       	rjmp	.-2      	; 0xac <__stop_program>
