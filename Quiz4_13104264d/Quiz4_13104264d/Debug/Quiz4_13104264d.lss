
Quiz4_13104264d.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000188  0000021c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000188  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  0000021c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000011a  00000000  00000000  0000028c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000c8  00000000  00000000  000003a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000010f  00000000  00000000  0000046e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000098  00000000  00000000  00000580  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000172  00000000  00000000  00000618  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ea  00000000  00000000  0000078a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00000874  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__vector_11>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 98 00 	jmp	0x130	; 0x130 <__vector_18>
  4c:	0c 94 83 00 	jmp	0x106	; 0x106 <__vector_19>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 70 00 	call	0xe0	; 0xe0 <main>
  88:	0c 94 c2 00 	jmp	0x184	; 0x184 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <init>:

unsigned char on=0;

void init()
{
	UCSR0B=(1<<TXEN0)|(1<<RXEN0);
  90:	e1 ec       	ldi	r30, 0xC1	; 193
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	88 e1       	ldi	r24, 0x18	; 24
  96:	80 83       	st	Z, r24
	UCSR0C=(1<<UCSZ00)|(1<<UCSZ01);
  98:	86 e0       	ldi	r24, 0x06	; 6
  9a:	80 93 c2 00 	sts	0x00C2, r24
	UCSR0B|=(1<<RXCIE0)|(1<<UDRIE0);
  9e:	80 81       	ld	r24, Z
  a0:	80 6a       	ori	r24, 0xA0	; 160
  a2:	80 83       	st	Z, r24
	UBRR0H=0;
  a4:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L=103;//9600  
  a8:	87 e6       	ldi	r24, 0x67	; 103
  aa:	80 93 c4 00 	sts	0x00C4, r24
	
	DDRB = 0xff;
  ae:	8f ef       	ldi	r24, 0xFF	; 255
  b0:	84 b9       	out	0x04, r24	; 4
	TIMSK1=0X02;
  b2:	ef e6       	ldi	r30, 0x6F	; 111
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	22 e0       	ldi	r18, 0x02	; 2
  b8:	20 83       	st	Z, r18
	PORTB=0x00;
  ba:	15 b8       	out	0x05, r1	; 5

	// interrupt setting
	EIMSK = 0x01;
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	8d bb       	out	0x1d, r24	; 29
	EICRA = 0x03;
  c0:	83 e0       	ldi	r24, 0x03	; 3
  c2:	80 93 69 00 	sts	0x0069, r24
	
	// Timer1 setting
	OCR1A = 0x4fff;
  c6:	8f ef       	ldi	r24, 0xFF	; 255
  c8:	9f e4       	ldi	r25, 0x4F	; 79
  ca:	90 93 89 00 	sts	0x0089, r25
  ce:	80 93 88 00 	sts	0x0088, r24
	TCCR1A=0x00;
  d2:	10 92 80 00 	sts	0x0080, r1
	TCCR1B=0x0D;
  d6:	8d e0       	ldi	r24, 0x0D	; 13
  d8:	80 93 81 00 	sts	0x0081, r24
	TIMSK1=(1<<OCIE1A);//enable Timer1 overflow interrupt
  dc:	20 83       	st	Z, r18
  de:	08 95       	ret

000000e0 <main>:


int main(void)
{
 
init();
  e0:	0e 94 48 00 	call	0x90	; 0x90 <init>
sei();
  e4:	78 94       	sei
  e6:	ff cf       	rjmp	.-2      	; 0xe6 <main+0x6>

000000e8 <__vector_11>:
while(1);

}


ISR (TIMER1_COMPA_vect){
  e8:	1f 92       	push	r1
  ea:	0f 92       	push	r0
  ec:	0f b6       	in	r0, 0x3f	; 63
  ee:	0f 92       	push	r0
  f0:	11 24       	eor	r1, r1
  f2:	8f 93       	push	r24
	on=1;
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	80 93 00 01 	sts	0x0100, r24
	
}
  fa:	8f 91       	pop	r24
  fc:	0f 90       	pop	r0
  fe:	0f be       	out	0x3f, r0	; 63
 100:	0f 90       	pop	r0
 102:	1f 90       	pop	r1
 104:	18 95       	reti

00000106 <__vector_19>:


ISR(USART_UDRE_vect)
{
 106:	1f 92       	push	r1
 108:	0f 92       	push	r0
 10a:	0f b6       	in	r0, 0x3f	; 63
 10c:	0f 92       	push	r0
 10e:	11 24       	eor	r1, r1
 110:	8f 93       	push	r24
	if((on==1)){
 112:	80 91 00 01 	lds	r24, 0x0100
 116:	81 30       	cpi	r24, 0x01	; 1
 118:	29 f4       	brne	.+10     	; 0x124 <__vector_19+0x1e>
		UDR0='a';
 11a:	81 e6       	ldi	r24, 0x61	; 97
 11c:	80 93 c6 00 	sts	0x00C6, r24
		on=0;
 120:	10 92 00 01 	sts	0x0100, r1
	}
}
 124:	8f 91       	pop	r24
 126:	0f 90       	pop	r0
 128:	0f be       	out	0x3f, r0	; 63
 12a:	0f 90       	pop	r0
 12c:	1f 90       	pop	r1
 12e:	18 95       	reti

00000130 <__vector_18>:


ISR(USART_RX_vect){
 130:	1f 92       	push	r1
 132:	0f 92       	push	r0
 134:	0f b6       	in	r0, 0x3f	; 63
 136:	0f 92       	push	r0
 138:	11 24       	eor	r1, r1
 13a:	8f 93       	push	r24
 13c:	9f 93       	push	r25
	unsigned char c;
	c=UDR0;
 13e:	80 91 c6 00 	lds	r24, 0x00C6
	if(c=='3'){
 142:	83 33       	cpi	r24, 0x33	; 51
 144:	39 f4       	brne	.+14     	; 0x154 <__vector_18+0x24>
		OCR1A=0x8fff;//2s
 146:	8f ef       	ldi	r24, 0xFF	; 255
 148:	9f e8       	ldi	r25, 0x8F	; 143
 14a:	90 93 89 00 	sts	0x0089, r25
 14e:	80 93 88 00 	sts	0x0088, r24
 152:	11 c0       	rjmp	.+34     	; 0x176 <__vector_18+0x46>
	}
	else if(c=='2'){
 154:	82 33       	cpi	r24, 0x32	; 50
 156:	39 f4       	brne	.+14     	; 0x166 <__vector_18+0x36>
		OCR1A=0x4fff;//1s
 158:	8f ef       	ldi	r24, 0xFF	; 255
 15a:	9f e4       	ldi	r25, 0x4F	; 79
 15c:	90 93 89 00 	sts	0x0089, r25
 160:	80 93 88 00 	sts	0x0088, r24
 164:	08 c0       	rjmp	.+16     	; 0x176 <__vector_18+0x46>
	}
	else if(c=='0'){
 166:	80 33       	cpi	r24, 0x30	; 48
 168:	31 f4       	brne	.+12     	; 0x176 <__vector_18+0x46>
		OCR1A=0x2fff;//0.5s
 16a:	8f ef       	ldi	r24, 0xFF	; 255
 16c:	9f e2       	ldi	r25, 0x2F	; 47
 16e:	90 93 89 00 	sts	0x0089, r25
 172:	80 93 88 00 	sts	0x0088, r24
	}
}
 176:	9f 91       	pop	r25
 178:	8f 91       	pop	r24
 17a:	0f 90       	pop	r0
 17c:	0f be       	out	0x3f, r0	; 63
 17e:	0f 90       	pop	r0
 180:	1f 90       	pop	r1
 182:	18 95       	reti

00000184 <_exit>:
 184:	f8 94       	cli

00000186 <__stop_program>:
 186:	ff cf       	rjmp	.-2      	; 0x186 <__stop_program>
