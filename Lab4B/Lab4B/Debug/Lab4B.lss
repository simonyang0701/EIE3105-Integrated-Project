
Lab4B.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000178  000001ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000178  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001fa  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000022c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007e1  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006db  00000000  00000000  00000a85  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b0  00000000  00000000  00001160  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  00001410  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003bb  00000000  00000000  00001474  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000132  00000000  00000000  0000182f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001961  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e7       	ldi	r30, 0x78	; 120
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 66 00 	call	0xcc	; 0xcc <main>
  8e:	0c 94 ba 00 	jmp	0x174	; 0x174 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <USART_Init>:
#define BAUD 4800
#define MYUBRR FOSC/16/BAUD-1

void USART_Init( unsigned int ubrr) {
	/*Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
  96:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (unsigned char)ubrr;
  9a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	
	/* Enable receiver and transmitter */
	UCSR0B = (1 << RXEN0)|(1 << TXEN0);
  9e:	88 e1       	ldi	r24, 0x18	; 24
  a0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	
	/* Set frame format: 8data, 1stop bit */
	UCSR0C = (0 << USBS0)|(3 << UCSZ00);
  a4:	86 e0       	ldi	r24, 0x06	; 6
  a6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  aa:	08 95       	ret

000000ac <USART_Transmit>:
}

void USART_Transmit( unsigned char data ) {
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1 << UDRE0)) );
  ac:	e0 ec       	ldi	r30, 0xC0	; 192
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	90 81       	ld	r25, Z
  b2:	95 ff       	sbrs	r25, 5
  b4:	fd cf       	rjmp	.-6      	; 0xb0 <USART_Transmit+0x4>
	/* Put data into buffer, sends the data */
	UDR0 = data;
  b6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  ba:	08 95       	ret

000000bc <USART_Receive>:
}

unsigned char USART_Receive( void )
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1 << RXC0)) )
  bc:	e0 ec       	ldi	r30, 0xC0	; 192
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 81       	ld	r24, Z
  c2:	88 23       	and	r24, r24
  c4:	ec f7       	brge	.-6      	; 0xc0 <USART_Receive+0x4>
	;
	/* Get and return received data from buffer */
	return UDR0;
  c6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
  ca:	08 95       	ret

000000cc <main>:

int main(void)
{
  cc:	cf 93       	push	r28
  ce:	df 93       	push	r29
  d0:	cd b7       	in	r28, 0x3d	; 61
  d2:	de b7       	in	r29, 0x3e	; 62
  d4:	63 97       	sbiw	r28, 0x13	; 19
  d6:	0f b6       	in	r0, 0x3f	; 63
  d8:	f8 94       	cli
  da:	de bf       	out	0x3e, r29	; 62
  dc:	0f be       	out	0x3f, r0	; 63
  de:	cd bf       	out	0x3d, r28	; 61
	const unsigned char READY = 13, TERM = 2, BYE = 4;
	unsigned char ready_string[13] = "We are ready!";
  e0:	8d e0       	ldi	r24, 0x0D	; 13
  e2:	e0 e0       	ldi	r30, 0x00	; 0
  e4:	f1 e0       	ldi	r31, 0x01	; 1
  e6:	de 01       	movw	r26, r28
  e8:	11 96       	adiw	r26, 0x01	; 1
  ea:	01 90       	ld	r0, Z+
  ec:	0d 92       	st	X+, r0
  ee:	8a 95       	dec	r24
  f0:	e1 f7       	brne	.-8      	; 0xea <main+0x1e>
	unsigned char term_string[2] = "Hi";
  f2:	88 e4       	ldi	r24, 0x48	; 72
  f4:	99 e6       	ldi	r25, 0x69	; 105
  f6:	9f 87       	std	Y+15, r25	; 0x0f
  f8:	8e 87       	std	Y+14, r24	; 0x0e
	unsigned char bye_string[4] = "Bye!";
  fa:	82 e4       	ldi	r24, 0x42	; 66
  fc:	99 e7       	ldi	r25, 0x79	; 121
  fe:	99 8b       	std	Y+17, r25	; 0x11
 100:	88 8b       	std	Y+16, r24	; 0x10
 102:	85 e6       	ldi	r24, 0x65	; 101
 104:	91 e2       	ldi	r25, 0x21	; 33
 106:	9b 8b       	std	Y+19, r25	; 0x13
 108:	8a 8b       	std	Y+18, r24	; 0x12
	unsigned char ri, bi, input_index = 0;
	USART_Init(MYUBRR);
 10a:	8f ec       	ldi	r24, 0xCF	; 207
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	0e 94 4b 00 	call	0x96	; 0x96 <USART_Init>
 112:	8e 01       	movw	r16, r28
 114:	0f 5f       	subi	r16, 0xFF	; 255
 116:	1f 4f       	sbci	r17, 0xFF	; 255
 118:	7e 01       	movw	r14, r28
 11a:	8e e0       	ldi	r24, 0x0E	; 14
 11c:	e8 0e       	add	r14, r24
 11e:	f1 1c       	adc	r15, r1
	unsigned char input;
	
	// Send out ready string
	for(ri = 0; ri < READY; ri++) {
		USART_Transmit(ready_string[ri]);
 120:	f8 01       	movw	r30, r16
 122:	81 91       	ld	r24, Z+
 124:	8f 01       	movw	r16, r30
 126:	0e 94 56 00 	call	0xac	; 0xac <USART_Transmit>
	unsigned char ri, bi, input_index = 0;
	USART_Init(MYUBRR);
	unsigned char input;
	
	// Send out ready string
	for(ri = 0; ri < READY; ri++) {
 12a:	e0 16       	cp	r14, r16
 12c:	f1 06       	cpc	r15, r17
 12e:	c1 f7       	brne	.-16     	; 0x120 <main+0x54>
 130:	10 e0       	ldi	r17, 0x00	; 0
 132:	7e 01       	movw	r14, r28
 134:	f4 e1       	ldi	r31, 0x14	; 20
 136:	ef 0e       	add	r14, r31
 138:	f1 1c       	adc	r15, r1
 13a:	01 c0       	rjmp	.+2      	; 0x13e <main+0x72>
	while(1) {
		input = USART_Receive();
		
		// Check input char
		if(input != term_string[input_index]) {
			input_index = 0;
 13c:	10 e0       	ldi	r17, 0x00	; 0
	for(ri = 0; ri < READY; ri++) {
		USART_Transmit(ready_string[ri]);
	}
	
	while(1) {
		input = USART_Receive();
 13e:	0e 94 5e 00 	call	0xbc	; 0xbc <USART_Receive>
		
		// Check input char
		if(input != term_string[input_index]) {
 142:	ee e0       	ldi	r30, 0x0E	; 14
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	ec 0f       	add	r30, r28
 148:	fd 1f       	adc	r31, r29
 14a:	e1 0f       	add	r30, r17
 14c:	f1 1d       	adc	r31, r1
 14e:	90 81       	ld	r25, Z
 150:	89 13       	cpse	r24, r25
 152:	f4 cf       	rjmp	.-24     	; 0x13c <main+0x70>
			input_index = 0;
			continue;
			} else {
			input_index++;
 154:	1f 5f       	subi	r17, 0xFF	; 255
		}
		
		// input valid, send out bye string
		if(input_index == TERM) {
 156:	12 30       	cpi	r17, 0x02	; 2
 158:	91 f7       	brne	.-28     	; 0x13e <main+0x72>
 15a:	8e 01       	movw	r16, r28
 15c:	00 5f       	subi	r16, 0xF0	; 240
 15e:	1f 4f       	sbci	r17, 0xFF	; 255
			input_index = 0;
			
			for(bi = 0; bi < BYE; bi++) {
				USART_Transmit(bye_string[bi]);
 160:	f8 01       	movw	r30, r16
 162:	81 91       	ld	r24, Z+
 164:	8f 01       	movw	r16, r30
 166:	0e 94 56 00 	call	0xac	; 0xac <USART_Transmit>
		
		// input valid, send out bye string
		if(input_index == TERM) {
			input_index = 0;
			
			for(bi = 0; bi < BYE; bi++) {
 16a:	e0 16       	cp	r14, r16
 16c:	f1 06       	cpc	r15, r17
 16e:	c1 f7       	brne	.-16     	; 0x160 <main+0x94>
			input_index++;
		}
		
		// input valid, send out bye string
		if(input_index == TERM) {
			input_index = 0;
 170:	10 e0       	ldi	r17, 0x00	; 0
 172:	e5 cf       	rjmp	.-54     	; 0x13e <main+0x72>

00000174 <_exit>:
 174:	f8 94       	cli

00000176 <__stop_program>:
 176:	ff cf       	rjmp	.-2      	; 0x176 <__stop_program>
