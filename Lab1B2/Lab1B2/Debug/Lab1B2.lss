
Lab1B2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000126  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000d2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000126  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000158  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000725  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000682  00000000  00000000  000008dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000027d  00000000  00000000  00000f5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000011dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003bf  00000000  00000000  00001200  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000058  00000000  00000000  000015bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001617  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 67 00 	jmp	0xce	; 0xce <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <util/delay.h>

int main(void)
{
    /* Replace with your application code */
	DDRD = 0xFF;
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0x00;
  84:	14 b8       	out	0x04, r1	; 4
	PORTB = 0xFF;
  86:	85 b9       	out	0x05, r24	; 5
	unsigned char state = 0x00;
	unsigned char flag = 0x00;
  88:	90 e0       	ldi	r25, 0x00	; 0
{
    /* Replace with your application code */
	DDRD = 0xFF;
	DDRB = 0x00;
	PORTB = 0xFF;
	unsigned char state = 0x00;
  8a:	20 e0       	ldi	r18, 0x00	; 0
				else{
					state = 0;
				}
			}
			if(state == 1){
				PORTD = 0xFF;
  8c:	4f ef       	ldi	r20, 0xFF	; 255
    {
		while(flag == (PINB & 0x01));
		flag = PINB & 0x01;
		if(flag){
			if(PINB & 1<<0){
				if(state == 0){
  8e:	31 e0       	ldi	r19, 0x01	; 1
  90:	50 e0       	ldi	r21, 0x00	; 0
	PORTB = 0xFF;
	unsigned char state = 0x00;
	unsigned char flag = 0x00;
    while (1) 
    {
		while(flag == (PINB & 0x01));
  92:	83 b1       	in	r24, 0x03	; 3
  94:	81 70       	andi	r24, 0x01	; 1
  96:	89 17       	cp	r24, r25
  98:	e1 f3       	breq	.-8      	; 0x92 <main+0x12>
		flag = PINB & 0x01;
  9a:	83 b1       	in	r24, 0x03	; 3
		if(flag){
  9c:	98 2f       	mov	r25, r24
  9e:	91 70       	andi	r25, 0x01	; 1
  a0:	80 ff       	sbrs	r24, 0
  a2:	0b c0       	rjmp	.+22     	; 0xba <main+0x3a>
			if(PINB & 1<<0){
  a4:	18 9b       	sbis	0x03, 0	; 3
  a6:	04 c0       	rjmp	.+8      	; 0xb0 <main+0x30>
				if(state == 0){
  a8:	83 2f       	mov	r24, r19
  aa:	21 11       	cpse	r18, r1
  ac:	85 2f       	mov	r24, r21
					state = 1;
				}
				else{
					state = 0;
  ae:	28 2f       	mov	r18, r24
				}
			}
			if(state == 1){
  b0:	21 30       	cpi	r18, 0x01	; 1
  b2:	11 f4       	brne	.+4      	; 0xb8 <main+0x38>
				PORTD = 0xFF;
  b4:	4b b9       	out	0x0b, r20	; 11
  b6:	01 c0       	rjmp	.+2      	; 0xba <main+0x3a>
			}
			else{
				PORTD = 0x00;
  b8:	1b b8       	out	0x0b, r1	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ba:	6f e7       	ldi	r22, 0x7F	; 127
  bc:	7a e1       	ldi	r23, 0x1A	; 26
  be:	86 e0       	ldi	r24, 0x06	; 6
  c0:	61 50       	subi	r22, 0x01	; 1
  c2:	70 40       	sbci	r23, 0x00	; 0
  c4:	80 40       	sbci	r24, 0x00	; 0
  c6:	e1 f7       	brne	.-8      	; 0xc0 <main+0x40>
  c8:	00 c0       	rjmp	.+0      	; 0xca <main+0x4a>
  ca:	00 00       	nop
  cc:	e2 cf       	rjmp	.-60     	; 0x92 <main+0x12>

000000ce <_exit>:
  ce:	f8 94       	cli

000000d0 <__stop_program>:
  d0:	ff cf       	rjmp	.-2      	; 0xd0 <__stop_program>
