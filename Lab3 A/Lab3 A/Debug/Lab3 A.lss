
Lab3 A.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00000232  000002a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000232  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002be  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002f0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000746  00000000  00000000  00000368  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000663  00000000  00000000  00000aae  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000352  00000000  00000000  00001111  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  00001464  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000392  00000000  00000000  000014dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000126  00000000  00000000  0000186e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001994  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 05 01 	jmp	0x20a	; 0x20a <__vector_14>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e3       	ldi	r30, 0x32	; 50
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 31       	cpi	r26, 0x18	; 24
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 77 00 	call	0xee	; 0xee <main>
  8e:	0c 94 17 01 	jmp	0x22e	; 0x22e <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <T1Delay_ctc>:
		PORTC &= 0;
	}
}

void T1Delay_ctc() {
	TCNT1 = 0;
  96:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  9a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	OCR1A = 0x3D09;
  9e:	89 e0       	ldi	r24, 0x09	; 9
  a0:	9d e3       	ldi	r25, 0x3D	; 61
  a2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  a6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	TCCR1A = 0x00;
  aa:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR1B = 0x0D;
  ae:	8d e0       	ldi	r24, 0x0D	; 13
  b0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	while((TIFR1 & (1 << OCF1A)) == 0);
  b4:	b1 9b       	sbis	0x16, 1	; 22
  b6:	fe cf       	rjmp	.-4      	; 0xb4 <T1Delay_ctc+0x1e>
	TCCR1B = 0x00;
  b8:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	TIFR1 = 0x1 << OCF1A;
  bc:	82 e0       	ldi	r24, 0x02	; 2
  be:	86 bb       	out	0x16, r24	; 22
  c0:	08 95       	ret

000000c2 <T1blink_ctc>:
}

void T1blink_ctc() {
	TCNT1 = 0;
  c2:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  c6:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	OCR1A = 0x0C35;
  ca:	85 e3       	ldi	r24, 0x35	; 53
  cc:	9c e0       	ldi	r25, 0x0C	; 12
  ce:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  d2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	TCCR1A = 0x00;
  d6:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR1B = 0x0D;
  da:	8d e0       	ldi	r24, 0x0D	; 13
  dc:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	while((TIFR1 & (1 << OCF1A)) == 0);
  e0:	b1 9b       	sbis	0x16, 1	; 22
  e2:	fe cf       	rjmp	.-4      	; 0xe0 <T1blink_ctc+0x1e>
	TCCR1B = 0x00;
  e4:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	TIFR1 = 0x1 << OCF1A;
  e8:	82 e0       	ldi	r24, 0x02	; 2
  ea:	86 bb       	out	0x16, r24	; 22
  ec:	08 95       	ret

000000ee <main>:

void T1Delay_ctc();
void T1blink_ctc();

int main(void)
{	
  ee:	cf 93       	push	r28
  f0:	df 93       	push	r29
  f2:	cd b7       	in	r28, 0x3d	; 61
  f4:	de b7       	in	r29, 0x3e	; 62
  f6:	68 97       	sbiw	r28, 0x18	; 24
  f8:	0f b6       	in	r0, 0x3f	; 63
  fa:	f8 94       	cli
  fc:	de bf       	out	0x3e, r29	; 62
  fe:	0f be       	out	0x3f, r0	; 63
 100:	cd bf       	out	0x3d, r28	; 61
	DDRB = 0xFF;
 102:	8f ef       	ldi	r24, 0xFF	; 255
 104:	84 b9       	out	0x04, r24	; 4
	DDRC = 0xFF;
 106:	87 b9       	out	0x07, r24	; 7
	DDRD &= 0x00;
 108:	8a b1       	in	r24, 0x0a	; 10
 10a:	1a b8       	out	0x0a, r1	; 10
	
	PORTB &= 0;
 10c:	85 b1       	in	r24, 0x05	; 5
 10e:	15 b8       	out	0x05, r1	; 5
	PORTC &= 0;
 110:	88 b1       	in	r24, 0x08	; 8
 112:	18 b8       	out	0x08, r1	; 8
	
	unsigned char i, j, k;
	unsigned char b_states[8] = {0x21, 0x11, 0x09, 0x0B, 0x0C, 0x0A, 0x09, 0x19};
 114:	88 e0       	ldi	r24, 0x08	; 8
 116:	e0 e0       	ldi	r30, 0x00	; 0
 118:	f1 e0       	ldi	r31, 0x01	; 1
 11a:	de 01       	movw	r26, r28
 11c:	11 96       	adiw	r26, 0x01	; 1
 11e:	01 90       	ld	r0, Z+
 120:	0d 92       	st	X+, r0
 122:	8a 95       	dec	r24
 124:	e1 f7       	brne	.-8      	; 0x11e <main+0x30>
	unsigned char c_states[8] = {0x10, 0x10, 0x10, 0x10, 0x20, 0x20, 0x10, 0x10};
 126:	88 e0       	ldi	r24, 0x08	; 8
 128:	e8 e0       	ldi	r30, 0x08	; 8
 12a:	f1 e0       	ldi	r31, 0x01	; 1
 12c:	de 01       	movw	r26, r28
 12e:	19 96       	adiw	r26, 0x09	; 9
 130:	01 90       	ld	r0, Z+
 132:	0d 92       	st	X+, r0
 134:	8a 95       	dec	r24
 136:	e1 f7       	brne	.-8      	; 0x130 <main+0x42>
	unsigned char t_states[8] = {5, 1, 1, 1, 5, 1, 1, 1};
 138:	88 e0       	ldi	r24, 0x08	; 8
 13a:	e0 e1       	ldi	r30, 0x10	; 16
 13c:	f1 e0       	ldi	r31, 0x01	; 1
 13e:	de 01       	movw	r26, r28
 140:	51 96       	adiw	r26, 0x11	; 17
 142:	01 90       	ld	r0, Z+
 144:	0d 92       	st	X+, r0
 146:	8a 95       	dec	r24
 148:	e1 f7       	brne	.-8      	; 0x142 <main+0x54>

	// Timer 0 interrupt
	TCNT0 = 0;
 14a:	16 bc       	out	0x26, r1	; 38
	OCR0A = 0x02;
 14c:	82 e0       	ldi	r24, 0x02	; 2
 14e:	87 bd       	out	0x27, r24	; 39
	TCCR0A = 0x02;
 150:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0x07;
 152:	97 e0       	ldi	r25, 0x07	; 7
 154:	95 bd       	out	0x25, r25	; 37
	TIMSK0 = (1 << OCIE0A);
 156:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	sei();
 15a:	78 94       	sei
			if(i != 5) {
				for(j = 0; j < t_states[i]; j++)
				T1Delay_ctc();
				} else {
				for(k = 0; k < 5; k++) {
					PORTC ^= (0x1 << 5);
 15c:	68 94       	set
 15e:	77 24       	eor	r7, r7
 160:	75 f8       	bld	r7, 5
 162:	6e 01       	movw	r12, r28
 164:	7e 01       	movw	r14, r28
 166:	88 e0       	ldi	r24, 0x08	; 8
 168:	e8 0e       	add	r14, r24
 16a:	f1 1c       	adc	r15, r1
 16c:	5e 01       	movw	r10, r28
 16e:	e1 e1       	ldi	r30, 0x11	; 17
 170:	ae 0e       	add	r10, r30
 172:	b1 1c       	adc	r11, r1

void T1Delay_ctc();
void T1blink_ctc();

int main(void)
{	
 174:	88 24       	eor	r8, r8
 176:	83 94       	inc	r8
 178:	91 2c       	mov	r9, r1
 17a:	0b c0       	rjmp	.+22     	; 0x192 <main+0xa4>
 17c:	93 94       	inc	r9
 17e:	83 94       	inc	r8
 180:	ff ef       	ldi	r31, 0xFF	; 255
 182:	cf 1a       	sub	r12, r31
 184:	df 0a       	sbc	r13, r31
 186:	8f ef       	ldi	r24, 0xFF	; 255
 188:	e8 1a       	sub	r14, r24
 18a:	f8 0a       	sbc	r15, r24
 18c:	ef ef       	ldi	r30, 0xFF	; 255
 18e:	ae 1a       	sub	r10, r30
 190:	be 0a       	sbc	r11, r30
	sei();
	
	while(1)
	{
		for(i = 0; i < 8; i++) {
			if(i == 0) {
 192:	91 10       	cpse	r9, r1
 194:	09 c0       	rjmp	.+18     	; 0x1a8 <main+0xba>
				PORTB |= b_states[i];
 196:	95 b1       	in	r25, 0x05	; 5
 198:	89 81       	ldd	r24, Y+1	; 0x01
 19a:	89 2b       	or	r24, r25
 19c:	85 b9       	out	0x05, r24	; 5
				PORTC |= c_states[i];
 19e:	98 b1       	in	r25, 0x08	; 8
 1a0:	89 85       	ldd	r24, Y+9	; 0x09
 1a2:	89 2b       	or	r24, r25
 1a4:	88 b9       	out	0x08, r24	; 8
 1a6:	11 c0       	rjmp	.+34     	; 0x1ca <main+0xdc>
				} else {
				PORTB ^= (b_states[i - 1] ^ b_states[i]);
 1a8:	95 b1       	in	r25, 0x05	; 5
 1aa:	f6 01       	movw	r30, r12
 1ac:	20 81       	ld	r18, Z
 1ae:	81 81       	ldd	r24, Z+1	; 0x01
 1b0:	82 27       	eor	r24, r18
 1b2:	89 27       	eor	r24, r25
 1b4:	85 b9       	out	0x05, r24	; 5
				PORTC ^= (c_states[i - 1] ^ c_states[i]);
 1b6:	98 b1       	in	r25, 0x08	; 8
 1b8:	f7 01       	movw	r30, r14
 1ba:	20 81       	ld	r18, Z
 1bc:	81 81       	ldd	r24, Z+1	; 0x01
 1be:	82 27       	eor	r24, r18
 1c0:	89 27       	eor	r24, r25
 1c2:	88 b9       	out	0x08, r24	; 8
			}
			if(i != 5) {
 1c4:	f5 e0       	ldi	r31, 0x05	; 5
 1c6:	9f 16       	cp	r9, r31
 1c8:	59 f0       	breq	.+22     	; 0x1e0 <main+0xf2>
				for(j = 0; j < t_states[i]; j++)
 1ca:	f5 01       	movw	r30, r10
 1cc:	00 81       	ld	r16, Z
 1ce:	00 23       	and	r16, r16
 1d0:	99 f0       	breq	.+38     	; 0x1f8 <main+0x10a>
 1d2:	10 e0       	ldi	r17, 0x00	; 0
				T1Delay_ctc();
 1d4:	0e 94 4b 00 	call	0x96	; 0x96 <T1Delay_ctc>
				} else {
				PORTB ^= (b_states[i - 1] ^ b_states[i]);
				PORTC ^= (c_states[i - 1] ^ c_states[i]);
			}
			if(i != 5) {
				for(j = 0; j < t_states[i]; j++)
 1d8:	1f 5f       	subi	r17, 0xFF	; 255
 1da:	10 13       	cpse	r17, r16
 1dc:	fb cf       	rjmp	.-10     	; 0x1d4 <main+0xe6>
 1de:	0c c0       	rjmp	.+24     	; 0x1f8 <main+0x10a>
 1e0:	19 2d       	mov	r17, r9
				T1Delay_ctc();
				} else {
				for(k = 0; k < 5; k++) {
					PORTC ^= (0x1 << 5);
 1e2:	88 b1       	in	r24, 0x08	; 8
 1e4:	87 25       	eor	r24, r7
 1e6:	88 b9       	out	0x08, r24	; 8
					T1blink_ctc();
 1e8:	0e 94 61 00 	call	0xc2	; 0xc2 <T1blink_ctc>
 1ec:	11 50       	subi	r17, 0x01	; 1
			}
			if(i != 5) {
				for(j = 0; j < t_states[i]; j++)
				T1Delay_ctc();
				} else {
				for(k = 0; k < 5; k++) {
 1ee:	c9 f7       	brne	.-14     	; 0x1e2 <main+0xf4>
					PORTC ^= (0x1 << 5);
					T1blink_ctc();
				}
				PORTC ^= (0x1 << 5);
 1f0:	88 b1       	in	r24, 0x08	; 8
 1f2:	87 25       	eor	r24, r7
 1f4:	88 b9       	out	0x08, r24	; 8
 1f6:	c2 cf       	rjmp	.-124    	; 0x17c <main+0x8e>
	TIMSK0 = (1 << OCIE0A);
	sei();
	
	while(1)
	{
		for(i = 0; i < 8; i++) {
 1f8:	f7 e0       	ldi	r31, 0x07	; 7
 1fa:	f8 15       	cp	r31, r8
 1fc:	08 f0       	brcs	.+2      	; 0x200 <main+0x112>
 1fe:	be cf       	rjmp	.-132    	; 0x17c <main+0x8e>
					T1blink_ctc();
				}
				PORTC ^= (0x1 << 5);
			}
		}
		PORTB &= 0;
 200:	85 b1       	in	r24, 0x05	; 5
 202:	15 b8       	out	0x05, r1	; 5
		PORTC &= 0;
 204:	88 b1       	in	r24, 0x08	; 8
 206:	18 b8       	out	0x08, r1	; 8
	}
 208:	ac cf       	rjmp	.-168    	; 0x162 <main+0x74>

0000020a <__vector_14>:
	while((TIFR1 & (1 << OCF1A)) == 0);
	TCCR1B = 0x00;
	TIFR1 = 0x1 << OCF1A;
}

ISR (TIMER0_COMPA_vect) {
 20a:	1f 92       	push	r1
 20c:	0f 92       	push	r0
 20e:	0f b6       	in	r0, 0x3f	; 63
 210:	0f 92       	push	r0
 212:	11 24       	eor	r1, r1
 214:	8f 93       	push	r24
 216:	9f 93       	push	r25
	PORTC ^= 0x01;
 218:	98 b1       	in	r25, 0x08	; 8
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	89 27       	eor	r24, r25
 21e:	88 b9       	out	0x08, r24	; 8
}
 220:	9f 91       	pop	r25
 222:	8f 91       	pop	r24
 224:	0f 90       	pop	r0
 226:	0f be       	out	0x3f, r0	; 63
 228:	0f 90       	pop	r0
 22a:	1f 90       	pop	r1
 22c:	18 95       	reti

0000022e <_exit>:
 22e:	f8 94       	cli

00000230 <__stop_program>:
 230:	ff cf       	rjmp	.-2      	; 0x230 <__stop_program>
