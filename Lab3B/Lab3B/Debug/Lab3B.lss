
Lab3B.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00000250  000002e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000250  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800118  00800118  000002fc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002fc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000032c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  0000036c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000758  00000000  00000000  000003a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000674  00000000  00000000  00000afc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000358  00000000  00000000  00001170  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000078  00000000  00000000  000014c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000395  00000000  00000000  00001540  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000126  00000000  00000000  000018d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  000019fb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 0b 01 	jmp	0x216	; 0x216 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e5       	ldi	r30, 0x50	; 80
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 31       	cpi	r26, 0x18	; 24
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e1       	ldi	r26, 0x18	; 24
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 31       	cpi	r26, 0x19	; 25
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 7f 00 	call	0xfe	; 0xfe <main>
  9e:	0c 94 26 01 	jmp	0x24c	; 0x24c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <T1Delay_ctc>:
		PORTC &= 0;
	}
}

void T1Delay_ctc() {
	TCNT1 = 0;
  a6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  aa:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	OCR1A = 0x3D09;
  ae:	89 e0       	ldi	r24, 0x09	; 9
  b0:	9d e3       	ldi	r25, 0x3D	; 61
  b2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  b6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	TCCR1A = 0x00;
  ba:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR1B = 0x0D;
  be:	8d e0       	ldi	r24, 0x0D	; 13
  c0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	while((TIFR1 & (1 << OCF1A)) == 0);
  c4:	b1 9b       	sbis	0x16, 1	; 22
  c6:	fe cf       	rjmp	.-4      	; 0xc4 <T1Delay_ctc+0x1e>
	TCCR1B = 0x00;
  c8:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	TIFR1 = 0x1 << OCF1A;
  cc:	82 e0       	ldi	r24, 0x02	; 2
  ce:	86 bb       	out	0x16, r24	; 22
  d0:	08 95       	ret

000000d2 <T1blink_ctc>:
}

void T1blink_ctc() {
	TCNT1 = 0;
  d2:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  d6:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	OCR1A = 0x0C35;
  da:	85 e3       	ldi	r24, 0x35	; 53
  dc:	9c e0       	ldi	r25, 0x0C	; 12
  de:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  e2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	TCCR1A = 0x00;
  e6:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR1B = 0x0D;
  ea:	8d e0       	ldi	r24, 0x0D	; 13
  ec:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	while((TIFR1 & (1 << OCF1A)) == 0);
  f0:	b1 9b       	sbis	0x16, 1	; 22
  f2:	fe cf       	rjmp	.-4      	; 0xf0 <T1blink_ctc+0x1e>
	TCCR1B = 0x00;
  f4:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	TIFR1 = 0x1 << OCF1A;
  f8:	82 e0       	ldi	r24, 0x02	; 2
  fa:	86 bb       	out	0x16, r24	; 22
  fc:	08 95       	ret

000000fe <main>:
void T1blink_ctc();

unsigned char count = 0;

int main(void)
{
  fe:	cf 93       	push	r28
 100:	df 93       	push	r29
 102:	cd b7       	in	r28, 0x3d	; 61
 104:	de b7       	in	r29, 0x3e	; 62
 106:	68 97       	sbiw	r28, 0x18	; 24
 108:	0f b6       	in	r0, 0x3f	; 63
 10a:	f8 94       	cli
 10c:	de bf       	out	0x3e, r29	; 62
 10e:	0f be       	out	0x3f, r0	; 63
 110:	cd bf       	out	0x3d, r28	; 61
	// Serial.begin(9600);
	
	DDRB = 0xFF;
 112:	8f ef       	ldi	r24, 0xFF	; 255
 114:	84 b9       	out	0x04, r24	; 4
	DDRC = 0xFF;
 116:	87 b9       	out	0x07, r24	; 7
	DDRD &= 0x00;
 118:	8a b1       	in	r24, 0x0a	; 10
 11a:	1a b8       	out	0x0a, r1	; 10
	
	PORTB &= 0;
 11c:	85 b1       	in	r24, 0x05	; 5
 11e:	15 b8       	out	0x05, r1	; 5
	PORTC &= 0;
 120:	88 b1       	in	r24, 0x08	; 8
 122:	18 b8       	out	0x08, r1	; 8
	PORTD |= (1 << 2);	// pull up PORTD.2
 124:	5a 9a       	sbi	0x0b, 2	; 11
	
	unsigned char i, j, k;
	unsigned char b_states[8] = {0x21, 0x11, 0x09, 0x0B, 0x0C, 0x0A, 0x09, 0x19};
 126:	88 e0       	ldi	r24, 0x08	; 8
 128:	e0 e0       	ldi	r30, 0x00	; 0
 12a:	f1 e0       	ldi	r31, 0x01	; 1
 12c:	de 01       	movw	r26, r28
 12e:	11 96       	adiw	r26, 0x01	; 1
 130:	01 90       	ld	r0, Z+
 132:	0d 92       	st	X+, r0
 134:	8a 95       	dec	r24
 136:	e1 f7       	brne	.-8      	; 0x130 <main+0x32>
	unsigned char c_states[8] = {0x10, 0x10, 0x10, 0x10, 0x20, 0x20, 0x10, 0x10};
 138:	88 e0       	ldi	r24, 0x08	; 8
 13a:	e8 e0       	ldi	r30, 0x08	; 8
 13c:	f1 e0       	ldi	r31, 0x01	; 1
 13e:	de 01       	movw	r26, r28
 140:	19 96       	adiw	r26, 0x09	; 9
 142:	01 90       	ld	r0, Z+
 144:	0d 92       	st	X+, r0
 146:	8a 95       	dec	r24
 148:	e1 f7       	brne	.-8      	; 0x142 <main+0x44>
	unsigned char t_states[8] = {5, 1, 1, 1, 5, 1, 1, 1};
 14a:	88 e0       	ldi	r24, 0x08	; 8
 14c:	e0 e1       	ldi	r30, 0x10	; 16
 14e:	f1 e0       	ldi	r31, 0x01	; 1
 150:	de 01       	movw	r26, r28
 152:	51 96       	adiw	r26, 0x11	; 17
 154:	01 90       	ld	r0, Z+
 156:	0d 92       	st	X+, r0
 158:	8a 95       	dec	r24
 15a:	e1 f7       	brne	.-8      	; 0x154 <main+0x56>

	// interrupt setting
	EIMSK = 0x01;
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	8d bb       	out	0x1d, r24	; 29
	EICRA = 0x03;
 160:	83 e0       	ldi	r24, 0x03	; 3
 162:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
	sei();
 166:	78 94       	sei
			if(i != 5) {
				for(j = 0; j < t_states[i]; j++)
				T1Delay_ctc();
				} else {
				for(k = 0; k < 5; k++) {
					PORTC ^= (0x1 << 5);
 168:	68 94       	set
 16a:	77 24       	eor	r7, r7
 16c:	75 f8       	bld	r7, 5
 16e:	6e 01       	movw	r12, r28
 170:	7e 01       	movw	r14, r28
 172:	88 e0       	ldi	r24, 0x08	; 8
 174:	e8 0e       	add	r14, r24
 176:	f1 1c       	adc	r15, r1
 178:	5e 01       	movw	r10, r28
 17a:	e1 e1       	ldi	r30, 0x11	; 17
 17c:	ae 0e       	add	r10, r30
 17e:	b1 1c       	adc	r11, r1
void T1blink_ctc();

unsigned char count = 0;

int main(void)
{
 180:	88 24       	eor	r8, r8
 182:	83 94       	inc	r8
 184:	91 2c       	mov	r9, r1
 186:	0b c0       	rjmp	.+22     	; 0x19e <main+0xa0>
 188:	93 94       	inc	r9
 18a:	83 94       	inc	r8
 18c:	ff ef       	ldi	r31, 0xFF	; 255
 18e:	cf 1a       	sub	r12, r31
 190:	df 0a       	sbc	r13, r31
 192:	8f ef       	ldi	r24, 0xFF	; 255
 194:	e8 1a       	sub	r14, r24
 196:	f8 0a       	sbc	r15, r24
 198:	ef ef       	ldi	r30, 0xFF	; 255
 19a:	ae 1a       	sub	r10, r30
 19c:	be 0a       	sbc	r11, r30
	sei();
	
	while(1)
	{
		for(i = 0; i < 8; i++) {
			if(i == 0) {
 19e:	91 10       	cpse	r9, r1
 1a0:	09 c0       	rjmp	.+18     	; 0x1b4 <main+0xb6>
				PORTB |= b_states[i];
 1a2:	95 b1       	in	r25, 0x05	; 5
 1a4:	89 81       	ldd	r24, Y+1	; 0x01
 1a6:	89 2b       	or	r24, r25
 1a8:	85 b9       	out	0x05, r24	; 5
				PORTC |= c_states[i];
 1aa:	98 b1       	in	r25, 0x08	; 8
 1ac:	89 85       	ldd	r24, Y+9	; 0x09
 1ae:	89 2b       	or	r24, r25
 1b0:	88 b9       	out	0x08, r24	; 8
 1b2:	11 c0       	rjmp	.+34     	; 0x1d6 <main+0xd8>
				} else {
				PORTB ^= (b_states[i - 1] ^ b_states[i]);
 1b4:	95 b1       	in	r25, 0x05	; 5
 1b6:	f6 01       	movw	r30, r12
 1b8:	20 81       	ld	r18, Z
 1ba:	81 81       	ldd	r24, Z+1	; 0x01
 1bc:	82 27       	eor	r24, r18
 1be:	89 27       	eor	r24, r25
 1c0:	85 b9       	out	0x05, r24	; 5
				PORTC ^= (c_states[i - 1] ^ c_states[i]);
 1c2:	98 b1       	in	r25, 0x08	; 8
 1c4:	f7 01       	movw	r30, r14
 1c6:	20 81       	ld	r18, Z
 1c8:	81 81       	ldd	r24, Z+1	; 0x01
 1ca:	82 27       	eor	r24, r18
 1cc:	89 27       	eor	r24, r25
 1ce:	88 b9       	out	0x08, r24	; 8
			}
			if(i != 5) {
 1d0:	f5 e0       	ldi	r31, 0x05	; 5
 1d2:	9f 16       	cp	r9, r31
 1d4:	59 f0       	breq	.+22     	; 0x1ec <main+0xee>
				for(j = 0; j < t_states[i]; j++)
 1d6:	f5 01       	movw	r30, r10
 1d8:	00 81       	ld	r16, Z
 1da:	00 23       	and	r16, r16
 1dc:	99 f0       	breq	.+38     	; 0x204 <main+0x106>
 1de:	10 e0       	ldi	r17, 0x00	; 0
				T1Delay_ctc();
 1e0:	0e 94 53 00 	call	0xa6	; 0xa6 <T1Delay_ctc>
				} else {
				PORTB ^= (b_states[i - 1] ^ b_states[i]);
				PORTC ^= (c_states[i - 1] ^ c_states[i]);
			}
			if(i != 5) {
				for(j = 0; j < t_states[i]; j++)
 1e4:	1f 5f       	subi	r17, 0xFF	; 255
 1e6:	10 13       	cpse	r17, r16
 1e8:	fb cf       	rjmp	.-10     	; 0x1e0 <main+0xe2>
 1ea:	0c c0       	rjmp	.+24     	; 0x204 <main+0x106>
 1ec:	19 2d       	mov	r17, r9
				T1Delay_ctc();
				} else {
				for(k = 0; k < 5; k++) {
					PORTC ^= (0x1 << 5);
 1ee:	88 b1       	in	r24, 0x08	; 8
 1f0:	87 25       	eor	r24, r7
 1f2:	88 b9       	out	0x08, r24	; 8
					T1blink_ctc();
 1f4:	0e 94 69 00 	call	0xd2	; 0xd2 <T1blink_ctc>
 1f8:	11 50       	subi	r17, 0x01	; 1
			}
			if(i != 5) {
				for(j = 0; j < t_states[i]; j++)
				T1Delay_ctc();
				} else {
				for(k = 0; k < 5; k++) {
 1fa:	c9 f7       	brne	.-14     	; 0x1ee <main+0xf0>
					PORTC ^= (0x1 << 5);
					T1blink_ctc();
				}
				PORTC ^= (0x1 << 5);
 1fc:	88 b1       	in	r24, 0x08	; 8
 1fe:	87 25       	eor	r24, r7
 200:	88 b9       	out	0x08, r24	; 8
 202:	c2 cf       	rjmp	.-124    	; 0x188 <main+0x8a>
	EICRA = 0x03;
	sei();
	
	while(1)
	{
		for(i = 0; i < 8; i++) {
 204:	f7 e0       	ldi	r31, 0x07	; 7
 206:	f8 15       	cp	r31, r8
 208:	08 f0       	brcs	.+2      	; 0x20c <main+0x10e>
 20a:	be cf       	rjmp	.-132    	; 0x188 <main+0x8a>
					T1blink_ctc();
				}
				PORTC ^= (0x1 << 5);
			}
		}
		PORTB &= 0;
 20c:	85 b1       	in	r24, 0x05	; 5
 20e:	15 b8       	out	0x05, r1	; 5
		PORTC &= 0;
 210:	88 b1       	in	r24, 0x08	; 8
 212:	18 b8       	out	0x08, r1	; 8
	}
 214:	ac cf       	rjmp	.-168    	; 0x16e <main+0x70>

00000216 <__vector_1>:
	while((TIFR1 & (1 << OCF1A)) == 0);
	TCCR1B = 0x00;
	TIFR1 = 0x1 << OCF1A;
}

ISR (INT0_vect) {
 216:	1f 92       	push	r1
 218:	0f 92       	push	r0
 21a:	0f b6       	in	r0, 0x3f	; 63
 21c:	0f 92       	push	r0
 21e:	11 24       	eor	r1, r1
 220:	8f 93       	push	r24
 222:	9f 93       	push	r25
	count ++;
 224:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
 228:	8f 5f       	subi	r24, 0xFF	; 255
 22a:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
	if(count > 2) {
 22e:	83 30       	cpi	r24, 0x03	; 3
 230:	30 f0       	brcs	.+12     	; 0x23e <__vector_1+0x28>
		PORTC ^= 0x01;
 232:	98 b1       	in	r25, 0x08	; 8
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	89 27       	eor	r24, r25
 238:	88 b9       	out	0x08, r24	; 8
		count = 0;
 23a:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <__data_end>
	}
}
 23e:	9f 91       	pop	r25
 240:	8f 91       	pop	r24
 242:	0f 90       	pop	r0
 244:	0f be       	out	0x3f, r0	; 63
 246:	0f 90       	pop	r0
 248:	1f 90       	pop	r1
 24a:	18 95       	reti

0000024c <_exit>:
 24c:	f8 94       	cli

0000024e <__stop_program>:
 24e:	ff cf       	rjmp	.-2      	; 0x24e <__stop_program>
