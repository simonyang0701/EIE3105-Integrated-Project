
13104264d_Quiz2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000018a  0000021e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000018a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  0000021e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000021e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  0000024e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000000e2  00000000  00000000  0000027e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000007c  00000000  00000000  00000360  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000000ec  00000000  00000000  000003dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  000004c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000016c  00000000  00000000  00000540  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ac  00000000  00000000  000006ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00000758  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 67 00 	jmp	0xce	; 0xce <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 90 00 	jmp	0x120	; 0x120 <__vector_11>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 c3 00 	jmp	0x186	; 0x186 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
int count=0;
int state=0;

int main(void)
{
	DDRB = 0xff;
  90:	8f ef       	ldi	r24, 0xFF	; 255
  92:	84 b9       	out	0x04, r24	; 4
	TIMSK1=0X02;
  94:	ef e6       	ldi	r30, 0x6F	; 111
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	22 e0       	ldi	r18, 0x02	; 2
  9a:	20 83       	st	Z, r18
	PORTB=0x01;
  9c:	81 e0       	ldi	r24, 0x01	; 1
  9e:	85 b9       	out	0x05, r24	; 5
	PORTD |= (1 << 2);
  a0:	5a 9a       	sbi	0x0b, 2	; 11
	
	// interrupt setting
	EIMSK = 0x01;
  a2:	8d bb       	out	0x1d, r24	; 29
	EICRA = 0x03;
  a4:	83 e0       	ldi	r24, 0x03	; 3
  a6:	80 93 69 00 	sts	0x0069, r24
	
	// Timer1 setting
	TCNT1 = 0;
  aa:	10 92 85 00 	sts	0x0085, r1
  ae:	10 92 84 00 	sts	0x0084, r1
	TCCR1A = 0x00;
  b2:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0x0D;
  b6:	8d e0       	ldi	r24, 0x0D	; 13
  b8:	80 93 81 00 	sts	0x0081, r24
	OCR1A = 0x2fff;
  bc:	8f ef       	ldi	r24, 0xFF	; 255
  be:	9f e2       	ldi	r25, 0x2F	; 47
  c0:	90 93 89 00 	sts	0x0089, r25
  c4:	80 93 88 00 	sts	0x0088, r24
	
	// Timer1 overflow interrupt
	TIMSK1 = (1 << OCIE1A);
  c8:	20 83       	st	Z, r18
	
	sei(); //enable interrupts
  ca:	78 94       	sei
  cc:	ff cf       	rjmp	.-2      	; 0xcc <main+0x3c>

000000ce <__vector_1>:
	{
	}
}


ISR (INT0_vect) {
  ce:	1f 92       	push	r1
  d0:	0f 92       	push	r0
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	0f 92       	push	r0
  d6:	11 24       	eor	r1, r1
  d8:	2f 93       	push	r18
  da:	3f 93       	push	r19
  dc:	8f 93       	push	r24
  de:	9f 93       	push	r25
	state=1-state;
  e0:	20 91 00 01 	lds	r18, 0x0100
  e4:	30 91 01 01 	lds	r19, 0x0101
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	82 1b       	sub	r24, r18
  ee:	93 0b       	sbc	r25, r19
  f0:	90 93 01 01 	sts	0x0101, r25
  f4:	80 93 00 01 	sts	0x0100, r24
	
	if(state==0){
  f8:	89 2b       	or	r24, r25
  fa:	11 f4       	brne	.+4      	; 0x100 <__vector_1+0x32>
		PORTB=0x01;
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	85 b9       	out	0x05, r24	; 5
	}
	if(state==1){
 100:	80 91 00 01 	lds	r24, 0x0100
 104:	90 91 01 01 	lds	r25, 0x0101
 108:	01 97       	sbiw	r24, 0x01	; 1
 10a:	09 f4       	brne	.+2      	; 0x10e <__vector_1+0x40>
		PORTB=0x00;
 10c:	15 b8       	out	0x05, r1	; 5
	}
	
}
 10e:	9f 91       	pop	r25
 110:	8f 91       	pop	r24
 112:	3f 91       	pop	r19
 114:	2f 91       	pop	r18
 116:	0f 90       	pop	r0
 118:	0f be       	out	0x3f, r0	; 63
 11a:	0f 90       	pop	r0
 11c:	1f 90       	pop	r1
 11e:	18 95       	reti

00000120 <__vector_11>:

ISR (TIMER1_COMPA_vect){
 120:	1f 92       	push	r1
 122:	0f 92       	push	r0
 124:	0f b6       	in	r0, 0x3f	; 63
 126:	0f 92       	push	r0
 128:	11 24       	eor	r1, r1
 12a:	8f 93       	push	r24
 12c:	9f 93       	push	r25
	if(state==0){
 12e:	80 91 00 01 	lds	r24, 0x0100
 132:	90 91 01 01 	lds	r25, 0x0101
 136:	89 2b       	or	r24, r25
 138:	a9 f4       	brne	.+42     	; 0x164 <__vector_11+0x44>
		if(count==2){
 13a:	80 91 02 01 	lds	r24, 0x0102
 13e:	90 91 03 01 	lds	r25, 0x0103
 142:	82 30       	cpi	r24, 0x02	; 2
 144:	91 05       	cpc	r25, r1
 146:	49 f4       	brne	.+18     	; 0x15a <__vector_11+0x3a>
			PORTB^=0b00000011;//toggle
 148:	95 b1       	in	r25, 0x05	; 5
 14a:	83 e0       	ldi	r24, 0x03	; 3
 14c:	89 27       	eor	r24, r25
 14e:	85 b9       	out	0x05, r24	; 5
			count=0;
 150:	10 92 03 01 	sts	0x0103, r1
 154:	10 92 02 01 	sts	0x0102, r1
 158:	05 c0       	rjmp	.+10     	; 0x164 <__vector_11+0x44>
		}
		else count++;
 15a:	01 96       	adiw	r24, 0x01	; 1
 15c:	90 93 03 01 	sts	0x0103, r25
 160:	80 93 02 01 	sts	0x0102, r24
	}
	if(state==1){
 164:	80 91 00 01 	lds	r24, 0x0100
 168:	90 91 01 01 	lds	r25, 0x0101
 16c:	01 97       	sbiw	r24, 0x01	; 1
 16e:	21 f4       	brne	.+8      	; 0x178 <__vector_11+0x58>
		PORTB^=0b00000011;//toggle
 170:	95 b1       	in	r25, 0x05	; 5
 172:	83 e0       	ldi	r24, 0x03	; 3
 174:	89 27       	eor	r24, r25
 176:	85 b9       	out	0x05, r24	; 5
	}
	
}
 178:	9f 91       	pop	r25
 17a:	8f 91       	pop	r24
 17c:	0f 90       	pop	r0
 17e:	0f be       	out	0x3f, r0	; 63
 180:	0f 90       	pop	r0
 182:	1f 90       	pop	r1
 184:	18 95       	reti

00000186 <_exit>:
 186:	f8 94       	cli

00000188 <__stop_program>:
 188:	ff cf       	rjmp	.-2      	; 0x188 <__stop_program>
