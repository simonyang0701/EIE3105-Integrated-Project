
Lab2A CTC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000dc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000130  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000160  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006c0  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000639  00000000  00000000  00000888  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001f8  00000000  00000000  00000ec1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000010bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000389  00000000  00000000  000010f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000004c  00000000  00000000  00001479  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000014c5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 5f 00 	call	0xbe	; 0xbe <main>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <_Z7T0Delayi>:
    {
		T0Delay(61);
		PORTB ^= 0x01;
    }
}
void T0Delay(int delay){
  80:	bc 01       	movw	r22, r24
	int i=0;
	for(i=0;i<delay;i++){
  82:	18 16       	cp	r1, r24
  84:	19 06       	cpc	r1, r25
  86:	d4 f4       	brge	.+52     	; 0xbc <_Z7T0Delayi+0x3c>
  88:	40 e0       	ldi	r20, 0x00	; 0
  8a:	50 e0       	ldi	r21, 0x00	; 0
		OCR0A = 255;
  8c:	af ef       	ldi	r26, 0xFF	; 255
		TCCR0A = 0x02;
  8e:	f2 e0       	ldi	r31, 0x02	; 2
		TCCR0B = 0x05;
  90:	e5 e0       	ldi	r30, 0x05	; 5
		while((TIFR0&(1<<OCR0A))==0);
		TCCR0B = 0;
		TIFR0 = (1<<TOV0);
  92:	81 e0       	ldi	r24, 0x01	; 1
    }
}
void T0Delay(int delay){
	int i=0;
	for(i=0;i<delay;i++){
		OCR0A = 255;
  94:	a7 bd       	out	0x27, r26	; 39
		TCCR0A = 0x02;
  96:	f4 bd       	out	0x24, r31	; 36
		TCCR0B = 0x05;
  98:	e5 bd       	out	0x25, r30	; 37
		while((TIFR0&(1<<OCR0A))==0);
  9a:	25 b3       	in	r18, 0x15	; 21
  9c:	97 b5       	in	r25, 0x27	; 39
  9e:	30 e0       	ldi	r19, 0x00	; 0
  a0:	02 c0       	rjmp	.+4      	; 0xa6 <_Z7T0Delayi+0x26>
  a2:	35 95       	asr	r19
  a4:	27 95       	ror	r18
  a6:	9a 95       	dec	r25
  a8:	e2 f7       	brpl	.-8      	; 0xa2 <_Z7T0Delayi+0x22>
  aa:	20 ff       	sbrs	r18, 0
  ac:	f6 cf       	rjmp	.-20     	; 0x9a <_Z7T0Delayi+0x1a>
		TCCR0B = 0;
  ae:	15 bc       	out	0x25, r1	; 37
		TIFR0 = (1<<TOV0);
  b0:	85 bb       	out	0x15, r24	; 21
		PORTB ^= 0x01;
    }
}
void T0Delay(int delay){
	int i=0;
	for(i=0;i<delay;i++){
  b2:	4f 5f       	subi	r20, 0xFF	; 255
  b4:	5f 4f       	sbci	r21, 0xFF	; 255
  b6:	64 17       	cp	r22, r20
  b8:	75 07       	cpc	r23, r21
  ba:	61 f7       	brne	.-40     	; 0x94 <_Z7T0Delayi+0x14>
  bc:	08 95       	ret

000000be <main>:

void T0Delay(int delay);
int main(void)
{
    /* Replace with your application code */
		DDRB = 0xFF;
  be:	8f ef       	ldi	r24, 0xFF	; 255
  c0:	84 b9       	out	0x04, r24	; 4
		PORTB = 0x01;
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	85 b9       	out	0x05, r24	; 5
    while (1) 
    {
		T0Delay(61);
		PORTB ^= 0x01;
  c6:	c1 e0       	ldi	r28, 0x01	; 1
    /* Replace with your application code */
		DDRB = 0xFF;
		PORTB = 0x01;
    while (1) 
    {
		T0Delay(61);
  c8:	8d e3       	ldi	r24, 0x3D	; 61
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	0e 94 40 00 	call	0x80	; 0x80 <_Z7T0Delayi>
		PORTB ^= 0x01;
  d0:	85 b1       	in	r24, 0x05	; 5
  d2:	8c 27       	eor	r24, r28
  d4:	85 b9       	out	0x05, r24	; 5
  d6:	f8 cf       	rjmp	.-16     	; 0xc8 <main+0xa>

000000d8 <_exit>:
  d8:	f8 94       	cli

000000da <__stop_program>:
  da:	ff cf       	rjmp	.-2      	; 0xda <__stop_program>
